"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
ggplot(activdata_atb_lodes,
aes(x = x, stratum = stratum, alluvium = Cohort,
y = freq,
fill = stratum, label = stratum)) +
scale_fill_manual(values = cols)+
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = 0.3,fill="White") +
geom_text(stat = "stratum", size = 3,angle=0) +
labs(title = "DSPT Status",
subtitle = "Status year to year - Trusts as of 31 March 2021",
y = "Frequency") +
theme_minimal()+
theme(legend.position = "none")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y2y3.svg"),width=30,height=20,dpi=300,units="cm")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y2y3.png"),width=30,height=20,dpi=300,units="cm")
# create static summary table of 18/19 > 19/20 > 20/21 changes between statuses.
table_forplotting <- dsptt_y2y3 %>% group_by(`Status18/19`,`Status19/20`,`Status20/21`) %>% summarise(freq=n())
activdata_atb_lodes <- to_lodes_form(as.data.frame(table_forplotting),
axes = 1:3,
id = "Cohort")
activdata_atb_lodes$stratum <- factor(activdata_atb_lodes$stratum,levels=(unique(activdata_atb_lodes$stratum)))
is_lodes_form(activdata_atb_lodes, key = x, value = stratum, id = Cohort, silent = TRUE)
#https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
n=4
my_palette <- rev(rainbow_hcl(4))
cols <- c("Standards Exceeded"=my_palette[1],
"Standards Met"=my_palette[2],
"Standards not fully met (plan agreed)"=my_palette[3],
"Standards Not Met"=my_palette[4],
"None"="black",
"19/20 Standards Exceeded" = my_palette[1],
"19/20 Standards Met" =  my_palette[2],
"19/20 Standards Not Fully Met (Plan Agreed)" =  my_palette[3],
"19/20 Standards Not Met" =  my_palette[4],
"20/21 Standards Exceeded" ="gray",
"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
ggplot(activdata_atb_lodes,
aes(x = x, stratum = stratum, alluvium = Cohort,
y = freq,
fill = stratum, label = stratum)) +
scale_fill_manual(values = cols)+
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = 0.3,fill="White") +
geom_text(stat = "stratum", size = 3,angle=0) +
labs(title = "DSPT Status",
subtitle = "Status year to year - Trusts as of 31 March 2021",
y = "Frequency") +
theme_minimal()+
theme(legend.position = "none")
# create static summary table of 18/19 > 19/20 > 20/21 changes between statuses.
table_forplotting <- dsptt_y2y3 %>% group_by(`Status18/19`,`Status19/20`,`Status20/21`) %>% summarise(freq=n())
activdata_atb_lodes <- to_lodes_form(as.data.frame(table_forplotting),
axes = 1:3,
id = "Cohort")
#https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
n=4
my_palette <- rev(rainbow_hcl(4))
cols <- c("Standards Exceeded"=my_palette[1],
"Standards Met"=my_palette[2],
"Standards not fully met (plan agreed)"=my_palette[3],
"Standards Not Met"=my_palette[4],
"None"="black",
"19/20 Standards Exceeded" = my_palette[1],
"19/20 Standards Met" =  my_palette[2],
"19/20 Standards Not Fully Met (Plan Agreed)" =  my_palette[3],
"19/20 Standards Not Met" =  my_palette[4],
"20/21 Standards Exceeded" ="gray",
"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
ggplot(activdata_atb_lodes,
aes(x = x, stratum = stratum, alluvium = Cohort,
y = freq,
fill = stratum, label = stratum)) +
scale_fill_manual(values = cols)+
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = 0.3,fill="White") +
geom_text(stat = "stratum", size = 3,angle=0) +
labs(title = "DSPT Status",
subtitle = "Status year to year - Trusts as of 31 March 2021",
y = "Frequency") +
theme_minimal()+
theme(legend.position = "none")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y1y2y3.svg"),width=30,height=20,dpi=300,units="cm")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y1y2y3.png"),width=30,height=20,dpi=300,units="cm")
dsptt_y2y3 <- left_join(dspt_2021assim %>% filter(Sector=="Trust") %>% select(Code,Name,`Status20/21`),
dspt_1920close %>% select(Code,`Status19/20`) )
dsptt_y2y3 <- left_join(dsptt_y2y3,
dspt_1819close %>% select(ODSCode,`Status18/19`),by=c("Code"="ODSCode") )
dsptt_y2y3 <- dsptt_y2y3 %>% mutate(`Status19/20`=ifelse(is.na(`Status19/20`),'19/20 None',`Status19/20`),
`Status18/19`=ifelse(is.na(`Status18/19`),'18/19 None',`Status18/19`)) # if N/A, assign none (likely new trust, but could refine)
## Change factor levels
dsptt_y2y3$`Status19/20` <- factor(dsptt_y2y3$`Status19/20`,levels=c("19/20 Standards Exceeded","19/20 Standards Met","19/20 Standards Not Fully Met (Plan Agreed)","19/20 Standards Not Met","None"))
dsptt_y2y3$`Status20/21` <- factor(dsptt_y2y3$`Status20/21`,levels=c("20/21 Standards Exceeded","20/21 Standards Met","20/21 Approaching Standards","20/21 Standards Not Met","Not published"))
dsptt_y2y3$`Status18/19` <- factor(dsptt_y2y3$`Status18/19`,levels=c("Standards Exceeded","Standards Met","Standards not fully met (plan agreed)","Standards Not Met","None"))
dsptt_y2y3 <- left_join(dspt_2021assim %>% filter(Sector=="Trust") %>% select(Code,Name,`Status20/21`),
dspt_1920close %>% select(Code,`Status19/20`) )
dsptt_y2y3 <- left_join(dsptt_y2y3,
dspt_1819close %>% select(ODSCode,`Status18/19`),by=c("Code"="ODSCode") )
dsptt_y2y3 <- dsptt_y2y3 %>% mutate(`Status19/20`=ifelse(is.na(`Status19/20`),'19/20 None',`Status19/20`),
`Status18/19`=ifelse(is.na(`Status18/19`),'18/19 None',`Status18/19`)) # if N/A, assign none (likely new trust, but could refine)
## Change factor levels
dsptt_y2y3$`Status19/20` <- factor(dsptt_y2y3$`Status19/20`,levels=c("19/20 Standards Exceeded","19/20 Standards Met","19/20 Standards Not Fully Met (Plan Agreed)","19/20 Standards Not Met","19/20 None"))
dsptt_y2y3$`Status20/21` <- factor(dsptt_y2y3$`Status20/21`,levels=c("20/21 Standards Exceeded","20/21 Standards Met","20/21 Approaching Standards","20/21 Standards Not Met","Not published"))
dsptt_y2y3$`Status18/19` <- factor(dsptt_y2y3$`Status18/19`,levels=c("Standards Exceeded","Standards Met","Standards not fully met (plan agreed)","Standards Not Met","18/19 None"))
# create static summary table of 19/20 > 20/21 changes between statuses.
table_forplotting <- dsptt_y2y3 %>% group_by(`Status19/20`,`Status20/21`) %>% summarise(freq=n())
colorspace::diverge_hsv(4)[1]
activdata_atb_lodes <- to_lodes_form(as.data.frame(table_forplotting),
axes = 1:2,
id = "Cohort")
activdata_atb_lodes$stratum <- factor(activdata_atb_lodes$stratum,levels=(unique(activdata_atb_lodes$stratum)))
is_lodes_form(activdata_atb_lodes, key = x, value = stratum, id = Cohort, silent = TRUE)
#https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
n=4
my_palette <- rev(rainbow_hcl(4))
cols <- c("19/20 Standards Exceeded" = my_palette[1],
"19/20 Standards Met" =  my_palette[2],
"19/20 Standards Not Fully Met (Plan Agreed)" =  my_palette[3],
"19/20 Standards Not Met" =  my_palette[4],
"20/21 Standards Exceeded" ="gray",
"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
ggplot(activdata_atb_lodes,
aes(x = x, stratum = stratum, alluvium = Cohort,
y = freq,
fill = stratum, label = stratum)) +
scale_fill_manual(values = cols)+
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = 0.3,fill="White") +
geom_text(stat = "stratum", size = 3,angle=0) +
labs(title = "DSPT Status",
subtitle = "Status year to year - Trusts as of 31 March 2021",
y = "Frequency") +
theme_minimal()+
theme(legend.position = "none")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y2y3.svg"),width=30,height=20,dpi=300,units="cm")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y2y3.png"),width=30,height=20,dpi=300,units="cm")
# create static summary table of 18/19 > 19/20 > 20/21 changes between statuses.
table_forplotting <- dsptt_y2y3 %>% group_by(`Status18/19`,`Status19/20`,`Status20/21`) %>% summarise(freq=n())
activdata_atb_lodes <- to_lodes_form(as.data.frame(table_forplotting),
axes = 1:3,
id = "Cohort")
is_lodes_form(activdata_atb_lodes, key = x, value = stratum, id = Cohort, silent = TRUE)
#https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
n=4
# create static summary table of 18/19 > 19/20 > 20/21 changes between statuses.
table_forplotting <- dsptt_y2y3 %>% group_by(`Status18/19`,`Status19/20`,`Status20/21`) %>% summarise(freq=n())
activdata_atb_lodes <- to_lodes_form(as.data.frame(table_forplotting),
axes = 1:3,
id = "Cohort")
is_lodes_form(activdata_atb_lodes, key = x, value = stratum, id = Cohort, silent = TRUE)
#https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
n=4
my_palette <- rev(rainbow_hcl(4))
cols <- c("Standards Exceeded"=my_palette[1],
"Standards Met"=my_palette[2],
"Standards not fully met (plan agreed)"=my_palette[3],
"Standards Not Met"=my_palette[4],
"18/19 None"="black",
"19/20 Standards Exceeded" = my_palette[1],
"19/20 Standards Met" =  my_palette[2],
"19/20 Standards Not Fully Met (Plan Agreed)" =  my_palette[3],
"19/20 Standards Not Met" =  my_palette[4],
"19/20 None"="black"
"20/21 Standards Exceeded" ="gray",
"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
cols <- c("Standards Exceeded"=my_palette[1],
"Standards Met"=my_palette[2],
"Standards not fully met (plan agreed)"=my_palette[3],
"Standards Not Met"=my_palette[4],
"18/19 None"="black",
"19/20 Standards Exceeded" = my_palette[1],
"19/20 Standards Met" =  my_palette[2],
"19/20 Standards Not Fully Met (Plan Agreed)" =  my_palette[3],
"19/20 Standards Not Met" =  my_palette[4],
"19/20 None"="black",
"20/21 Standards Exceeded" ="gray",
"20/21 Standards Met"="gray",
"20/21 Approaching Standards"="gray",
"20/21 Standards Not Met" = "gray",
"Not published"="gray")
ggplot(activdata_atb_lodes,
aes(x = x, stratum = stratum, alluvium = Cohort,
y = freq,
fill = stratum, label = stratum)) +
scale_fill_manual(values = cols)+
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = 0.3,fill="White") +
geom_text(stat = "stratum", size = 3,angle=0) +
labs(title = "DSPT Status",
subtitle = "Status year to year - Trusts as of 31 March 2021",
y = "Frequency") +
theme_minimal()+
theme(legend.position = "none")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y1y2y3.svg"),width=30,height=20,dpi=300,units="cm")
ggsave(paste0(here::here("outputs"),"/sankey_trusts_y1y2y3.png"),width=30,height=20,dpi=300,units="cm")
links <- data.frame(
source=c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target=c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I"),
importance=(sample(1:4, 12, replace=T))
)
links
nodes <- data.frame(
name=LETTERS[1:10],
carac=c( rep("young",3),rep("adult",2), rep("old",5))
)
nodes
?LETTERS
network <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
install.packages("igraph")
library(igraph)
network <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
network
View(network)
View(network[1])
edges_aux <- dsptt_y2y3 %>% select(`Status18/19`,`Status19/20`) %>% rename(source=`Status18/19`,target=`Status19/20`) %>%
bind_rows(dsptt_y2y3 %>% select(`Status19/20`,`Status20/21`) %>% rename(source=`Status19/20`,target=`Status20/21`))
View(edges_aux)
network = graph_from_data_frame(d=links,directed=F)
library(d3r)
install.packages("d3r")
data_json <- d3_igraph(network)
library(d3r)
data_json <- d3_igraph(network)
write(data_json,"data.json")
View(nodes)
nodes=data.frame(name=c(links$source %>% unique(),links$target %>% unique()))
nodes
links = edges_aux
nodes=data.frame(name=c(links$source %>% unique(),links$target %>% unique()))
nodes
nodes=data.frame(name=c(links$source %>% unique(),links$target %>% unique()) %>% unique)
nodes
View(links)
nodes <- data.frame(id = as.numeric(V(network)),
name = V(network)$name)
nodes
network = graph_from_data_frame(d=links,directed=F)
nodes <- data.frame(id = as.numeric(V(network)),
name = V(network)$name)
nodes
g = graph_from_data_frame(d=links,directed=F)
links_ = edges_aux
g = graph_from_data_frame(d=links_,directed=F) # graph
nodes <- data.frame(id = as.numeric(V(g)),
name = V(g)$name)
nodes
as.data.frame(get.edges(g, E(g)))
nodes <- data.frame(id = as.numeric(V(g)),
name = V(g)$name)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% summarise(freq=n()) %>% data.frame()
links
# Load package for Sankey
# Load package
library(networkD3)
install.packages("networkD3")
# Load package for Sankey
# Load package
library(networkD3)
# Load energy projection data
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
# Now we have 2 data frames: a 'links' data frame with 3 columns (from, to, value), and a 'nodes' data frame that gives the name of each node.
head( Energy$links )
head( Energy$nodes )
# Thus we can plot it
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p
links
head(links)
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
# Create nodes file
nodes <- data.frame(id = as.numeric(V(g)-1),
name = V(g)$name)
nodes
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% summarise(freq=n()) %>% data.frame()
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
# Create nodes file
nodes <- data.frame(id = as.numeric(V(g)-1), # -1 to make it zero-indexed for Javascript
name = V(g)$name)
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% summarise(freq=n()) %>% data.frame()
links
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% mutate(V1=V1-1,V2=V2-1) summarise(freq=n()) %>% data.frame()
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% mutate(V1=V1-1,V2=V2-1) %>% summarise(freq=n()) %>% data.frame()
links
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
p2
?sankeyNetwork
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
p2
levels_order_1819 = c("Standards Exceeded","Standards Met","Standards not fully met (plan agreed)","Standards Not Met","18/19 None")
levels_order_1920 = c("19/20 Standards Exceeded","19/20 Standards Met","19/20 Standards Not Fully Met (Plan Agreed)","19/20 Standards Not Met","19/20 None")
levels_order_2021 = c("20/21 Standards Exceeded","20/21 Standards Met","20/21 Approaching Standards","20/21 Standards Not Met","Not published"))
levels_order_2021 = c("20/21 Standards Exceeded","20/21 Standards Met","20/21 Approaching Standards","20/21 Standards Not Met","Not published")
levels_order = c(levels_order_1819,levels_order_1920,levels_order2021)
levels_order = c(levels_order_1819,levels_order_1920,levels_order_2021)
links_ <- links_ %>% mutate_at(c(source,target),as.factor(.,levels=levels_order))
links_ <- links_ %>% mutate_at(c(`source`,`target`),as.factor(.,levels=levels_order))
colnames(links_)
links_ <- links_ %>% mutate_at(vars(`source`,`target`),as.factor(.,levels=levels_order))
links_ <- links_ %>% mutate_at(vars(`source`,`target`),factor(.,levels=levels_order))
links_ <- links_ %>% mutate_at(vars(`source`,`target`),.~factor(.,levels=levels_order))
links_ <- links_ %>% mutate_at(vars(`source`,`target`),.~as.factor(.,levels=levels_order))
levels_order
links_ <- links_ %>% mutate_at(vars(`source`,`target`),.as.factor,levels=levels_order)
links_ <- links_ %>% mutate_at(vars(`source`,`target`),as.factor,levels=levels_order)
links_ <- links_ %>% mutate_at(vars(`source`,`target`),factor,levels=levels_order)
# Create graph
g = graph_from_data_frame(d=links_,directed=F) # graph
library(d3r)
data_json <- d3_igraph(g)
write(data_json,"data.json")
# Create nodes file
nodes <- data.frame(id = as.numeric(V(g)-1), # -1 to make it zero-indexed for Javascript
name = V(g)$name)
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% mutate(V1=V1-1,V2=V2-1) %>% # -1 to make it zero-indexed
summarise(freq=n()) %>% data.frame()
# Load package for Sankey
# Load package
library(networkD3)
# Now we have 2 data frames: a 'links' data frame with 3 columns (from, to, value), and a 'nodes' data frame that gives the name of each node.
head( Energy$links )
head( Energy$nodes )
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
p2
links_ <- links_ %>% mutate_at(vars(`source`,`target`),factor,levels=levels_order) %>% order(source,target)
links_ <- links_ %>% mutate_at(vars(`source`,`target`),factor,levels=levels_order) %>% arrange(source,target)
# Create graph
g = graph_from_data_frame(d=links_,directed=F) # graph
library(d3r)
data_json <- d3_igraph(g)
write(data_json,"data.json")
# Create nodes file
nodes <- data.frame(id = as.numeric(V(g)-1), # -1 to make it zero-indexed for Javascript
name = V(g)$name)
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% mutate(V1=V1-1,V2=V2-1) %>% # -1 to make it zero-indexed
summarise(freq=n()) %>% data.frame()
# Load package for Sankey
# Load package
library(networkD3)
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30)
p2
View(links_)
# Create nodes file
nodes <- data.frame(id = as.numeric(V(g)-1), # -1 to make it zero-indexed for Javascript
name = V(g)$name)
nodes
# Create links file (aggregate)
links <- as.data.frame(get.edges(g, E(g))) %>% group_by(V1,V2) %>% mutate(V1=V1-1,V2=V2-1) %>% # -1 to make it zero-indexed
summarise(freq=n()) %>% data.frame()
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30,
iterations=0) # to not alter node ordering
p2
# save the widget
library(htmlwidgets)
p2 <- htmlwidgets::prependContent(sankey, htmltools::tags$h1("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::prependContent(p, htmltools::tags$h1("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
saveWidget(p, file=paste0( getwd(), "/SankeyTrustDSPT.html"))
p2
p2 <- htmlwidgets::prependContent(p2, htmltools::tags$h1("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p2, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
p2
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30,
iterations=0) # to not alter node ordering
p2
# Add content to html object # https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page
library(htmlwidgets)
p2 <- htmlwidgets::prependContent(p2, htmltools::tags$h1("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p2, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
p2
p2 <- htmlwidgets::prependContent(p2, htmltools::tags$h3("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p2, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
p2
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30,
iterations=0) # to not alter node ordering
p2
p2 <- htmlwidgets::prependContent(p2, htmltools::tags$h3("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p2, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
p2
saveWidget(p2, file=paste0( getwd(), "/SankeyTrustDSPT.html"))
# Thus we can plot it
p2 <- sankeyNetwork(Links = links, Nodes = nodes, Source = "V1",
Target = "V2", Value = "freq", NodeID = "name",
units = "trusts", fontSize = 12, nodeWidth = 30,
iterations=0) # to not alter node ordering
p2
# Add content to html object # https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page
library(htmlwidgets)
p2 <- htmlwidgets::prependContent(p2, htmltools::tags$h3("DSPT status over three editions - Trusts active end-FY20/21"))
p2 <- htmlwidgets::appendContent(p2, htmltools::tags$p("Pre-merger status not accounted for. Note also that standards are raised each year."))
p2
saveWidget(p2, file=paste0( getwd(), "/SankeyTrustDSPT.html"))
mat <- cor(t(mtcars[,c(1,3:6)]))
mat
t(mtcars[,c(1,3:6)])
t(mtcars[,c(1,3:6)]) %>% View()
mtcars[,c(1,3:6)] %>% View()
mat <- cor(t(mtcars[,c(1,3:6)]))
View(mat)
library(rgdal)
# load ggplot2
library(ggplot2)
library(tidyverse)
library(leaflet)
## Load 'curated' DSPT file
data <- read_csv("./outputs/data_DSPTmetric_20211021.csv")
## Load shapefile
# Source: https://geoportal.statistics.gov.uk/datasets/clinical-commissioning-groups-april-2020-full-clipped-boundaries-en/explore?location=52.950000%2C-2.000000%2C7.02
ccg_spdf <- readOGR("./Inputs/shapefile/Clinical_Commissioning_Groups_(April_2020)_EN_BFC_V2.shp")
proj4string(ccg_spdf) <- CRS("+init=epsg:27700")  # BNG projection system
ccg_spdf@proj4string # check system
ccg_spdf <- ccg_spdf %>% sp::spTransform(CRS("+init=epsg:4326")) # reproject to latlong system
lkp_ccg <- read.csv('./Inputs/Clinical_Commissioning_Groups_(April_2020)_Names_and_Codes_in_England.csv')
# Join DSPT data and ONS code
data <- data %>% left_join(lkp_ccg %>% select(c("CCG20CD","CCG20CDH")),by=c("Code"="CCG20CDH"))
# Select relevant columns of data
data_red <- data %>% select(Final.Status,CCG20CD,Code,Successor.Code)
# Join the reduced DSPT info with the shapefile
ccg_spdf@data <- left_join(ccg_spdf@data,data_red,by=c("ccg20cd"="CCG20CD"))
dspt2021levels=c("20/21 Standards Exceeded","20/21 Standards Met","20/21 Approaching Standards","20/21 Standards Not Met","Not Published")
# Make Status a categorical
ccg_spdf@data$Final.Status = factor(ccg_spdf@data$Final.Status,dspt2021levels)
# Choose a palette
my_palette <- rev(colorspace::rainbow_hcl(5))
catpal <- colorFactor(my_palette, ccg_spdf@data$Final.Status)
## Plotting
# Prepare the text for tooltips:
mytext <- paste(
"CCG code (ODS): ", ccg_spdf@data$Code,"<br/>",
"CCG code (ONS): ", ccg_spdf@data$ccg20cd,"<br/>",
"CCG Successor code (ODS): ", ccg_spdf@data$Successor.Code,"<br/>",
"CCG name: ", ccg_spdf@data$ccg20nm,"<br/>",
"DSPT Status: ", ccg_spdf@data$Final.Status, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Final Map
m<-leaflet(ccg_spdf) %>%
addTiles()  %>%
setView( lat=53, lng=-2 , zoom=6) %>%
addPolygons(
fillColor = ~catpal(Final.Status),
stroke=TRUE,
fillOpacity = 0.9,
color="black",
weight=0.5,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend( pal=catpal, values=~Final.Status, opacity=0.9, title = "20/21 DSPT Status (CCG)", position = "bottomleft" )
m
# save the widget in a html file if needed.
library(htmlwidgets)
saveWidget(m, file=paste0( getwd(), "/HtmlWidget/choropleth_DSPT_CCG.html"))
