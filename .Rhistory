#### BupaR intro ##
library(bupaR)
library(processmapR)
library(tidyverse)
View(patients)
#https://bupar.net/processmaps.html
patients %>% process_map()
patients %>%
process_map(type = frequency("relative"))
patients %>%
process_map(type = frequency("relative_case"))
patients %>%
process_map(performance(median, "days"))
patients_d <- patients
## Inspect class
class(patients)
patients # summary information given
mapping(patients)
n_activities(patients)
activity_labels(patients)
activities(patients) # frequency (absolute and relative)
processing_time(patients,"activity",units="mins") # summary of activity duration
processing_time(patients, level="log", units="days") # summary of case duration
##### Sepsis example ###
# https://notast.netlify.app/post/process-mining-part-2-3-more-on-bupar-package/
## loading relevant ODBC data
ncdr_flag = FALSE
if (ncdr_flag){
# connect to sandbox
library(DBI)
con <- dbConnect(odbc::odbc(), "NCDR", timeout = 10)
# check which tables are available in the database
dbListTables(con)
# Querying
# dbGetQuery() will submit query and fetch results
dataraw <- dbGetQuery(con,
"SELECT * FROM [NHSE_Sandbox_EmpowerThePerson].[dbo].[MFonseca_OPArheu]")
dataraw_2 <- dbGetQuery(con,
"SELECT * FROM [NHSE_Sandbox_EmpowerThePerson].[dbo].[MFonseca_OPArheu02]")
#  It is also possible to submit the query and fetch separately with dbSendQuery() and dbFetch(). The n= argument to dbFetch() can be used to fetch only the part of a query result (the next n rows).
#result <- dbSendQuery(con,"SELECT age_singleyear FROM [Age_Bands Lookup]")
# Retrieve the first 100 results
#first_100 <- dbFetch(result, n = 100)
# Retrieve the rest of the results
#rest <- dbFetch(result)
## event log ##
# Join first and follow-up appointments
data_fel <- dataraw %>%
rename("Appointment_Type"="Der_Appointment_Type") %>%
bind_rows(dataraw_2 %>% select(-c("First_Date")))
# Add column indicating which OPA it is
data_fel <- data_fel %>% group_by(Der_Pseudo_NHS_Number) %>% mutate(OPAnr=order(Appointment_Date),
event = ifelse(OPAnr==1,Appointment_Type,paste0(Appointment_Type," ",OPAnr-1))) %>%
ungroup()
forevent = data_fel %>% mutate(status="complete",
activity_instance=1:nrow(.),
resource_id="consultant") %>% .[1:40000,]
} else{
forevent = read.csv('G:/My Drive/HSMA/forevent.csv')
forevent$Appointment_Date <- as.Date(forevent$Appointment_Date)
}
event_rheu <- eventlog(forevent,
case_id="Der_Pseudo_NHS_Number",
activity_id="event",
activity_instance_id="activity_instance",
lifecycle_id="status",
timestamp="Appointment_Date",
resource_id="resource_id")
event_rheu %>% summary()
patients %>% summary()
#event_rheu %>% process_map()
mapping(event_rheu)
mapping(patients)
n_activities(event_rheu)
n_activities(patients)
activity_labels(patients)
activity_labels(event_rheu)
activities(patients) # frequency (absolute and relative)
activities(event_rheu) %>% View()
## Trim to 5 follow ups
aa<- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New","FUp 1","Fup 2","FUp 3","FUp 4","FUp 5","Fup 6"))
aa %>% process_map(performance(median, "days"))
aa %>% process_map()
aa %>% process_map(type = frequency("relative"))
aa %>% process_map(type = frequency("relative_case"))
a <- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("FUp 1"))  %>% summary()
### Trim to more
event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10))) %>%
process_map(type=frequency("relative_case"))
event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10))) %>%
process_map(type=performance(median, "days"))
event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10))) %>%
process_map()
# Trim based on activities with no less than 300 cases (essentially up to FUp4)
event_rheu %>%
filter_activity_frequency(interval = c(300,1000)) %>% activities %>% View
event_rheu %>%
filter_activity_frequency(interval = c(300,1000)) %>% summary
event_rheu %>%
filter_activity_frequency(interval = c(300,1000)) %>%
process_map()
#event_rheu %>%
#  process_map()
# 100033397341
#### visual video
## Animate patiet class
animate_process(patients)
library(processanimateR)
install.packages("processanimateR")
library(processanimateR)
## Animate patiet class
animate_process(patients)
animate_process
animate_process(patients, mapping = token_aes(size = token_scale(12), shape = "rect"))
animate_process(patients, mapping = token_aes(color = token_scale("red")))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
animate_process(patients,
mapping = token_aes(shape = "image",
size = token_scale(10),
image = token_scale("https://upload.wikimedia.org/wikipedia/en/5/5f/Pacman.gif")))
animate_process(patients,
mapping = token_aes(shape = "image",
size = token_scale(10),
image = token_scale("https://i.gifer.com/XOsf.mp4")))
animate_process(patients,
mapping = token_aes(shape = "image",
size = token_scale(10),
image = token_scale("https://png2.cleanpng.com/sh/d2be44dc6b5f5202ce80a792ca26a059/L0KzQYm3U8IxN5ptfZH0aYP2gLBuTf10NaFme592YX6wgLLqTf1idl5mfOhuboT4grb6TflvNaVuhdc2cHHmPb7ojr1xaV51edV2YX6wcrLqiBdzd6ZzfJ8AYXK0RIS8WcZnbJI6UZCAN0i1QIm7V8E2OmI6TqgANUO3RYm5TwBvbz==/kisspng-ms-pac-man-pac-man-adventures-in-time-pac-man-pa-pacman-background-5ab143596fda59.5782084715215665534582.png4")))
class(patients)
class(event_rheu)
a <- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("FUp 1"))  %>% summary()
a
event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10))) %>%
process_map()
a_fup10 <- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10)))
a_fup10 %>% summary()
animate_process(aa, mode = "relative")
?animate_process
animate_process(aa, mode = "absolute")
View(aa)
View(aa)
View(patients_d)
View(patients_d)
## Animate patiet class
animate_process(patients)
animate_process(patients,mode="relative")
aa$Appointment_Date %>% class()
patients_d$time %>% class()
example_log = example_log
View(example_log)
View(example_log)
event_rheu$Appointment_Date <- as.POSIXlt(event_rheu$Appointment_Date)
aa$Appointment_Date %>% class()
event_rheu$Appointment_Date %>% class()
aa$Appointment_Date <- as.POSIXlt(aa$Appointment_Date)
animate_process(aa, mode = "absolute")
aa %>% class()
forevent$time = forevent$Appointment_Date %>% as.POSIXct.POSIXlt()
forevent$time = forevent$Appointment_Date %>% as.POSIXct.Date()
forevent$time %>% class()
View(forevent)
View(forevent)
event_rheu <- eventlog(forevent,
case_id="Der_Pseudo_NHS_Number",
activity_id="event",
activity_instance_id="activity_instance",
lifecycle_id="status",
timestamp="time",
resource_id="resource_id")
event_rheu %>% summary()
patients %>% summary()
mapping(event_rheu)
mapping(patients)
n_activities(event_rheu)
n_activities(patients)
activity_labels(patients)
activity_labels(event_rheu)
activities(patients) # frequency (absolute and relative)
activities(event_rheu) %>% View()
aa<- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New","FUp 1","Fup 2","FUp 3","FUp 4","FUp 5","Fup 6"))
aa %>% process_map(performance(median, "days"))
aa %>% process_map()
aa %>% process_map(type = frequency("relative"))
aa %>% process_map(type = frequency("relative_case"))
animate_process(aa, mode = "absolute")
animate_process(aa, mode = "relative")
View(patients_d)
View(patients_d)
patients %>% process_map()
animate_process(a_fup10,
mode = "relative",
mapping = token_aes(color = token_scale("event",
scale = "ordinal",
range = RColorBrewer::brewer.pal(11, "Paired"))))
a_fup10 <- event_rheu %>%
filter_trim(start_activities = "New", end_activities =  c("New",paste0("FUp ",1:10)))
animate_process(a_fup10,
mode = "relative",
)
animate_process(a_fup10,
mode = "relative",
mapping = token_aes(color = token_scale("event",
scale = "ordinal",
range = RColorBrewer::brewer.pal(11, "Paired"))))
animate_process(a_fup10,
mode = "relative",
legend="color",
jitter=10,
mapping = token_aes(color = token_scale("event",
scale = "ordinal",
range = RColorBrewer::brewer.pal(11, "Paired"))))
animate_process(a_fup10,
mode = "relative",
legend="color",
duration-30,
jitter=10,
mapping = token_aes(color = token_scale("event",
scale = "ordinal",
range = RColorBrewer::brewer.pal(11, "Paired"))))
animate_process(a_fup10,
mode = "relative",
legend="color",
duration=30,
jitter=10,
mapping = token_aes(color = token_scale("event",
scale = "ordinal",
range = RColorBrewer::brewer.pal(11, "Paired"))))
files <- c("New-Periods-Provider-Apr19-revised-XLS-1038K")
for (i in files){
print(i)
}
data_store = data.frame()
library(tidyverse)
setwd("G:/My Drive/HSMA/HSMA_project_digitaloutpatients/au-HSMA-DOP/Data sources and parameters/RTT")
library(tidyverse)
list.files(pwd)
list.files()
files <- list.files()
files <- files[2,12]
files <- files[c(2,12)]
files
files <- list.files()
files <- files[c(2:12)]
files
i <- files[1]
i
data_i <- readxl(i)
library(tidyverse)
data_i <- readxl(i)
data_i <- read_excel(i,sheet="Provider")
library(readxl)
data_i <- read_excel(i,sheet="Provider")
View(data_i)
View(data_i)
?read_excel
data_i <- read_excel(i,sheet="Provider",skip=13)
View(data_i)
View(data_i)
data_store = data.frame()
for (i in files){
print(i)
data_i <- read_excel(i,sheet="Provider",skip=13)
data_i <- data_i %>% mutate(date=substr(i,22,26))
data_store <- bind_rows(data_store,data_i)
}
View(data_store)
View(data_store)
write.csv(data_store,"output/New-Periods-Provider-FY1920.csv")
files <- list.files()
files
files <- list.files()
files
files <- files[c(2:12)]
data_store = data.frame()
for (i in files){
print(i)
data_i <- read_excel(i,sheet="Provider",skip=13)
data_i <- data_i %>% mutate(date=substr(i,22,26))
data_store <- bind_rows(data_store,data_i)
}
files <- files[c(2:13)]
data_store = data.frame()
for (i in files){
print(i)
data_i <- read_excel(i,sheet="Provider",skip=13)
data_i <- data_i %>% mutate(date=substr(i,22,26))
data_store <- bind_rows(data_store,data_i)
}
files
files <- list.files()
files <- files[c(2:13)]
files
data_store = data.frame()
for (i in files){
print(i)
data_i <- read_excel(i,sheet="Provider",skip=13)
data_i <- data_i %>% mutate(date=substr(i,22,26))
data_store <- bind_rows(data_store,data_i)
}
write.csv(data_store,"output/New-Periods-Provider-FY1920.csv")
write.csv(data_store,"output/New-Periods-Provider-FY1920.csv")
